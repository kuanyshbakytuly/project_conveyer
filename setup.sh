#!/bin/bash
# RTSP Camera Setup Script

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_header() {
    echo -e "${BLUE}======================================${NC}"
    echo -e "${BLUE}RTSP Camera Configuration Setup${NC}"
    echo -e "${BLUE}======================================${NC}"
    echo ""
}

print_status() {
    echo -e "${GREEN}[✓]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

print_error() {
    echo -e "${RED}[✗]${NC} $1"
}

# Create .env file if it doesn't exist
create_env_file() {
    if [ ! -f .env ]; then
        print_status "Creating .env file from template..."
        cp .env.rtsp .env
        print_warning "Please edit .env file with your camera URLs"
    else
        print_warning ".env file already exists"
    fi
}

# Interactive camera configuration
configure_cameras() {
    echo -e "\n${BLUE}Camera Configuration${NC}"
    echo "===================="
    
    read -p "How many cameras do you want to configure? [1-20]: " num_cameras
    
    # Validate input
    if ! [[ "$num_cameras" =~ ^[0-9]+$ ]] || [ "$num_cameras" -lt 1 ] || [ "$num_cameras" -gt 20 ]; then
        print_error "Invalid number of cameras. Using default (4)"
        num_cameras=4
    fi
    
    # Create temporary env file
    temp_env=".env.temp"
    cat > "$temp_env" << EOF
# RTSP Camera Configuration
# Generated by setup script on $(date)

# Number of streams to process
NUM_STREAMS=$num_cameras

# Stream settings
TARGET_FPS=25
FRAME_SKIP=2
JPEG_QUALITY=80

# RTSP settings
RTSP_NO_BUFFER=false
RTSP_TRANSPORT=tcp
RTSP_TIMEOUT=10

# Performance
MP_QUEUE_SIZE=3
ASYNC_QUEUE_SIZE=3

# Camera URLs
EOF
    
    # Configure each camera
    for ((i=0; i<num_cameras; i++)); do
        echo ""
        echo "Camera $i Configuration:"
        echo "----------------------"
        echo "Common formats:"
        echo "  HIKVision: rtsp://admin:password@192.168.1.100:554/Streaming/Channels/101"
        echo "  Dahua:     rtsp://admin:password@192.168.1.100:554/cam/realmonitor?channel=1"
        echo "  Generic:   rtsp://user:password@192.168.1.100:554/stream1"
        
        read -p "Enter RTSP URL for Camera $i: " rtsp_url
        
        if [ -z "$rtsp_url" ]; then
            # Default URL
            rtsp_url="rtsp://admin:admin@192.168.1.$((100+i)):554/stream1"
            print_warning "Using default URL: $rtsp_url"
        fi
        
        echo "RTSP_URL_$i=$rtsp_url" >> "$temp_env"
    done
    
    # Show configuration
    echo ""
    echo -e "${BLUE}Configuration Summary:${NC}"
    echo "====================="
    grep "RTSP_URL_" "$temp_env" | while read line; do
        # Hide password in display
        display_line=$(echo "$line" | sed -E 's/(rtsp:\/\/[^:]+:)[^@]+(@)/\1****\2/g')
        echo "$display_line"
    done
    
    # Confirm configuration
    echo ""
    read -p "Save this configuration? [Y/n]: " confirm
    if [[ "$confirm" != "n" && "$confirm" != "N" ]]; then
        mv "$temp_env" .env
        print_status "Configuration saved to .env"
    else
        rm "$temp_env"
        print_warning "Configuration cancelled"
    fi
}

# Test camera connections
test_cameras() {
    echo -e "\n${BLUE}Testing Camera Connections${NC}"
    echo "========================="
    
    if [ ! -f "test_rtsp_cameras.py" ]; then
        print_error "test_rtsp_cameras.py not found"
        return
    fi
    
    print_status "Running connection tests..."
    python test_rtsp_cameras.py --parallel
}

# Generate docker-compose override
generate_docker_override() {
    echo -e "\n${BLUE}Docker Configuration${NC}"
    echo "===================="
    
    # Check if we should use host network mode
    read -p "Use host network mode? (recommended for RTSP) [Y/n]: " use_host
    
    if [[ "$use_host" != "n" && "$use_host" != "N" ]]; then
        cat > docker-compose.override.yml << EOF
version: '3.8'

services:
  rtsp-processor:
    network_mode: host
    env_file:
      - .env
EOF
        print_status "Created docker-compose.override.yml with host networking"
    else
        cat > docker-compose.override.yml << EOF
version: '3.8'

services:
  rtsp-processor:
    ports:
      - "8000:8000"
    env_file:
      - .env
    networks:
      - rtsp-network

networks:
  rtsp-network:
    driver: bridge
EOF
        print_status "Created docker-compose.override.yml with bridge networking"
    fi
}

# Main menu
main_menu() {
    while true; do
        echo ""
        echo -e "${BLUE}RTSP Setup Menu${NC}"
        echo "==============="
        echo "1) Configure cameras interactively"
        echo "2) Test camera connections"
        echo "3) Generate Docker configuration"
        echo "4) Start with Docker Compose"
        echo "5) View example configurations"
        echo "6) Exit"
        echo ""
        read -p "Select option [1-6]: " choice
        
        case $choice in
            1)
                configure_cameras
                ;;
            2)
                test_cameras
                ;;
            3)
                generate_docker_override
                ;;
            4)
                if [ -f "docker-compose.rtsp.yml" ]; then
                    print_status "Starting RTSP processor..."
                    docker-compose -f docker-compose.rtsp.yml up -d
                else
                    print_error "docker-compose.rtsp.yml not found"
                fi
                ;;
            5)
                echo -e "\n${BLUE}Example Configurations:${NC}"
                echo ""
                echo "HIKVision Main Stream:"
                echo "  rtsp://admin:12345@192.168.1.100:554/Streaming/Channels/101"
                echo ""
                echo "HIKVision Sub Stream (lower resolution):"
                echo "  rtsp://admin:12345@192.168.1.100:554/Streaming/Channels/102"
                echo ""
                echo "Dahua:"
                echo "  rtsp://admin:admin@192.168.1.101:554/cam/realmonitor?channel=1&subtype=0"
                echo ""
                echo "Axis:"
                echo "  rtsp://root:pass@192.168.1.102/axis-media/media.amp"
                echo ""
                read -p "Press Enter to continue..."
                ;;
            6)
                echo "Exiting..."
                exit 0
                ;;
            *)
                print_error "Invalid option"
                ;;
        esac
    done
}

# Check prerequisites
check_prerequisites() {
    echo -e "${BLUE}Checking Prerequisites${NC}"
    echo "====================="
    
    # Check Python
    if command -v python3 &> /dev/null; then
        print_status "Python3 found: $(python3 --version)"
    else
        print_error "Python3 not found"
        exit 1
    fi
    
    # Check Docker
    if command -v docker &> /dev/null; then
        print_status "Docker found: $(docker --version)"
    else
        print_error "Docker not found"
        exit 1
    fi
    
    # Check Docker Compose
    if command -v docker-compose &> /dev/null || docker compose version &> /dev/null; then
        print_status "Docker Compose found"
    else
        print_error "Docker Compose not found"
        exit 1
    fi
    
    # Check for required files
    required_files=("config.py" "processor.py" "backend.py" "docker-compose.rtsp.yml")
    missing_files=()
    
    for file in "${required_files[@]}"; do
        if [ ! -f "$file" ]; then
            missing_files+=("$file")
        fi
    done
    
    if [ ${#missing_files[@]} -eq 0 ]; then
        print_status "All required files present"
    else
        print_error "Missing files: ${missing_files[*]}"
        exit 1
    fi
}

# Main execution
print_header
check_prerequisites
echo ""

# Quick setup option
if [ "$1" == "--quick" ]; then
    print_status "Running quick setup..."
    create_env_file
    test_cameras
    generate_docker_override
    exit 0
fi

# Interactive menu
main_menu